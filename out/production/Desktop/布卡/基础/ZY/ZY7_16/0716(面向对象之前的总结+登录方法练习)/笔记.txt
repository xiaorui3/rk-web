
	16-17	
	18休息
	三天上课，休息一天

	9:12		14:17	18-21

	写一篇(文章)	笔记		CSDN  博客  知乎

	JavaWEB之前			Node.js

	技术互问		上午		下午

=============================================

知识回顾：
	1.Java历史背景和特点
		跨平台(操作系统)	任何一个操作系统下识别并运行
		不同版本的虚拟机JVM	Java Virtual Machine
		JRE					Java Runtime Environment
		JDK					Java Development Kit	(javac java)
	2.发现开发Java需要一个环境
		安装JDK		www.oracle.com		8,11,17
		JDK/bin/		javac.exe编译		java.exe执行
	3.学习如何编写我们的第一个Java程序
		电脑上的一个文件里		.java	源代码
		class 名字{}
		名字的规则和规约
		规则：只能含有字母，数字，符号
			字母，区分大小写(大小写敏感)
			数字，不能开头
			符号，_  $
			中文，理论上是可以的(强烈不建议)	字符集乱码
		规约：
			类名				遵循大驼峰	Demo	MyDemo
			变量/属性/方法		遵循小驼峰	demo	myDemo
			包名				全部字母小写	
			静态常量			全部字母大写	DEMO	MY_DEMO
			隐形规约：见到名字知道含义，可读性
			最好多加注释

			//单行
			/*
					多行
			*/
			/**
					文档注释
			*/
	
		类想要执行					arguments
			public static void main(String[] args){}
			public class Test{		Test.java		Test.class
				main
			}
	4.编译和执行我们的源代码
		遇到一个问题：
			希望通过编译工具，去编译我得源文件
			C://program Files/jdk/bin		javac
			D://test						Demo.java	Demo.class
		配置环境变量
			path目的，将工具放在一个位置上，在当前电脑的任何盘符都能使用
			classPath目的，将所有编译出来的.class文件统一管理起来
			JAVA_HOME目的

			javac Demo.java
			java 类名
===================================================
		System.out.println("hello");		print
		System.out.println("hello");		println
		System.out.println(10);

	5.数据类型
		两大类，基本数据类型，引用数据类型
		基本类型--8
			整型		4
				byte			1字节---8bit
					0 0000000	-128		127
				short		2字节---16bit
					-32768		32767
				int			4字节----32bit
					-2147483648		2147483647
				long				64bit
			浮点型	2
				float			32bit
					0 000000000 000000000000
				double		64bit
					0 000000000000000000  0000000000000000000
			字符型	1		16bit	0-65535
				char		'9'	' '	'我'	'+'
					'0'--'9'		48--57
					'A'--'Z'		65--90
					'a'--'z'		97--122
			布尔型	1		1bit/1字节	0/1
				boolean		true/false
					不能跟整数进行转化
		引用类型--n
			数组---[]
			类-----class
			抽象类---abstract class
			接口---interface
			枚举---enum
			注解---@interface
		
	6.常量，变量
		常量(值)
			所有基本类型的值都是常量
				10，10.4，'a'，true
			引用类型的默认值null是常量
			public static final int a = 10;		int a = 10;	a.
			String引用类型---->String对象	"abc"
				String s = "abc";
			"abc"是一个String类型的对象，加载在常量缓冲区中

		变量(空间)		容器
			数据类型 变量名;
			栈内存开辟一块内存空间，类型确定，里面的信息一份
				float a = 3.4F;		3.4常量-double
				long b = 2147489999L;
	7.数据类型之间的转化问题
		前提是，同种大数据类型一致
		基本--基本	才能做直接强制转化
			都是整数/都是浮点		空间大小
			整数-浮点				精确程度
			整数/浮点--字符		Unicode
		引用--引用	才能做转化		向上/向下转型	造型
		Person p = new Teacher();		ClassCastException
		Teacher t = (Teacher)p;
		基本--引用	简介转化(包装类)	Intager
		int---String	10+""		"10"
		String---int	int value = Integer.parseInt("10");
							NumberFormatException
	8.运算符号
		按照操作数的数目	单目 双目 三目		? : ;
		按照符号的功能
			算数			++  --
				int a = 1;
				a=a++;		a?1--2--1		内存(副本空间)
			赋值			+=
			比较			> >=	boolean
			逻辑			&&  ||	&
			位运算(bit)	&
			十进制，二进制，八进制，十六进制
			二进制：正数，负数	(原码，反码，补码)
			补码
		11111101-----？	取反----？

		&和&&的区别-----?	3分
		1.&可以当作逻辑运算，可以当作位运算	&&只能当作逻辑运算
		2.当他们两个都是逻辑运算的时候，前面正常，后面那个短路（？？？？）
===================================================
		
	9.语法结构
		顺序结构
		分支结构
			if	if(){}else{}
			switch	case 	default		注意case的穿透
				break
		循环结构
			for	while	do...while
		break & continue
		标记		ok:for		break ok;

	10.数组			容器
		数组概念及特点
		是一个容器，用来存储一组相同数据类型的数据
		数组是一个引用数据类型
		数组存储在堆内存的空间里
		数组的每一个"小格子"地址连续的(遍历非常的方便，快)
		数组在创建的时候，必须指定长度，一旦确定不能再次改变

		数组的基本写法及用法
		数组定义/声明		变量
			数据类型[]  变量名;
		数组的初始化		开辟真实的数组空间(对象)
			静态		有长度，有元素
				int[] array = new int[] {1,2,3,4,5};
			动态		有长度，没有元素(存在默认值)	0 0.0 false null
				int[] array = new int[3];
		数组元素的访问		每一个"小格子"	
				index	0开始	长度减一
						ArrayIndexOutOfBoundsException
		数组的遍历/轮询
				for(int index=0;index<array.length;index++){}
				for(int v:array){}
		好多练习	

		数组底层的内存原理
		多维数组(二维)			NullPointerException

==================================================
==================================================
==================================================
	
	面向过程		
		步骤/流程		关注点都在具体的步骤上
					关注点从具体的步骤上，变成关注一堆步骤(整体)
						方法(一堆步骤的集合)-----做了一件事情
					设计方法的人		调用方法的人		不是一个人

		方法如果不止一个	10		归类
					关注点方法到底是"谁"来调用的
	面向对象的编程思想
		类-----抽象笼统的描述		概念		人类
			类是对一堆具有同样特征事物的描述
		对象---具体的个体			具备了类描述的所有特性
			对象才能做事	属性	方法
		实例化---创建对象的意思
	面向切面
		目标对象，切面对象，代理对象，切入点，通知(前置 后置 环绕)

	--------------------------------------------------------------

	11.如何设计一个类
		属性		像是一个变量，作用静态描述类中一些信息的
	权限修饰符 [特征修饰符] 数据类型 属性名字 [= 值];

		*方法	才是做事情，里面包含很多逻辑，动态描述一些行为
	权限修饰符 [特征修饰符] 返回值类型 方法名字 ([参数列表]) [抛出异常] [{方法体}]
		一般方法：权限 返回值 方法名([参数]){}
			方法是做了一件事情
			参数，做事情之前"别人"提供给我的条件		0-n
			返回值，做完之后，给"别人"留下点什么结果	0-1
		设计方法难????

		构造方法
		构造方法可以理解为，是一个特殊的方法
		特殊在事情上，做的事情是唯一的，一件事：构造当前类的对象
		权限修饰符 方法名就是类名() {
			构建了一个对象
			return 对象;
		}
		每一个类中都含有一个默认无参数的构造方法
		如果你自己描述了构造方法，默认的即被覆盖

		代码块
		代码块也可以理解为是一个特殊的方法
		特殊在结构上	没有修饰符，没有参数，没有返回值，没名字
		每次执行构造方法之前，自动调用的
		{
			
		}

		创建对象，才能去使用类中的属性或方法
		new 调用构造方法，返回一个对象
		对象去做事

		--------------------------------------------------------

		方法重载overload

		内存中，类的加载，对象空间的开辟，方法执行的栈内存
		方法执行的时候参数及返回值的传递(基本，引用类型)

		ArrayBox封装

	------------------------------------------------------------------

	12.类和类的关系(对象-对象的关系)
		高内聚，低耦合

		A is-a B
			public class A extends B{}		implements
			public class B{}

		继承：
			1.每一个类都有继承类，如果写extends关键字就继承后面那个
				如果没写extends，默认继承Object
				Object是所有引用类型的父类，里面的方法很重要
					String = toString();
					int = hashCode();
					boolean = equals(Object obj);
					Class = getClass();
					notify();
					notifyAll();
					wait();	3个重载
					clone();
					finalize();	对象在被垃圾回收器回收的时候
			2.子类继承父类，可以将父类中的成员拿过来直接使用
				属性，方法-----public  protected
			3.如果继承过来的方法不能满足子类的需要
				可以进行方法重写
			4.子类也可添加自己独有方法的
			5.Java中的继承是单继承
			6.子类继承父类，当创建子类对象的时候，默认调用父类构造方法
			7.this，super
				this和super代表的是哪个对象？？
				调用什么东西？	放在哪儿写？
					调用一般属性，一般方法
					随便(属性，方法，构造方法，代码块)

					调用构造方法
					只能放在另一个构造方法里，程序的第一行
					this和super是不能同时出现

		A has-a B
			public class A{
				private B b = new B();
			}
			public class B{}
								Model  Service  Controller
		A use-a B
			public class A{
				public void test(B b){
					B b = new B();
				}
			}
			public class B{}

		模拟农夫养猪，屠夫杀猪
		模拟机房，电脑，学生
		模拟搬家公司，卡车，家具

	--------------------------------------------------------------

	ask刘鑫洋		answer肇钰鑫

	方法重写override和方法重载overload区别		方法---类里面
1.不能单独存在，类里面		1个	2个类(关系)
	重载一个类中的多个方法	相同的名字 不同参数 构成重载
						不同：个数，类型，顺序
	重写产生父子继承关系的两个类中，子类重写父类的方法
2.方法结构			方法重载			方法重写
	权限修饰符		没要求		子类方法修饰符大于等于父类
	特征修饰符		没要求		static不存在，final不能，abstract必须
	返回类型			没要求		子类方法的返回值小于等于父类
	名字				必须一致		与父类方法必须一致
	(参数)			必须不一致	与父类方法一致
	异常				没要求		编译时(个数和类型小于等于父类)
	{方法体}			通常不一样	通常肯定是跟父类方法不一样

------------------------------------------------------------------------------------

	13.面向对象高级部分(特定场景)
		权限修饰符	类(public 默认不写)和类成员(属性，方法，构造方法)
			public		公有的		本类 本包 继承 工程内的任意类
			protected		受保护的		本类 本包 继承
			默认不写		默认的		本类 本包
			private		私有的		本类

		封装
			1.将一堆逻辑代码包装起来----方法
			2.将属性私有化+对应的get/set方法
			3.框架	ArrayBox

	----------------------------------------------------------------------

		特征修饰符	native  transient   volatile   synchronized
			static
				修饰类(内部类)及类成员(属性 方法 代码块)
				静态元素加载的很早，在类加载的时候就初始化了
				每一个类会有一个单独的静态元素空间
				静态元素只加载一次，全部类对象，类本身共享
				静态元素跟对象空间没有关系，通过类名可以直接访问的
				静态元素不能访问非静态成员的
				非静态成员可以访问静态成员
				静态元素中不能使用this和super关键字的
					
			final		单例设计模式，静态常量
				类及类成员，变量
				变量：给一次赋值机会，不能再次改变
				属性：必须赋初始值，不能改了
				方法：子类不能重写这个方法
				类：不能被其他类继承

			abstract
				方法，类
				方法：只有方法的结构，没有具体的方法执行体(没有大括号)
				一般类中不允许含有抽象方法

		抽象类，接口，多态		转型

	抽象类和接口的区别
public abstract class Xxx{}			public interface Xxx{}
1.类结构的写法				abstract class			interface
2.类里面能描述的成员
	属性					随便static final			只能public static final
	方法					随便					只能public abstract
	代码块				随便					不能有
	构造方法				含有					不含有
3.是否能创建对象
	都不能创建对象，只能通过子类(单继承)/(多实现)
4.和其他类的关系
	抽象类可以直接单继承抽象类			接口可以直接多继承接口
	抽象类可以直接多实现接口
	具体类不能直接单继承抽象类(添加实现)  具体类不能直接多实现接口(添加实现)

==============================================

	15.多态
		一个对象可以体现出多种不同的形态
		前提是，需要有继承关系
		父类的引用可以指向子类的对象
			Person p = new Teacher();
		调用方法是由前面类型决定的
		执行的结果是由后面类型决定的，如果子类重写，就执行子类重写之后的
		这种写法导致子类中独有方法就无法调用啦
		如果想要调用子类独有方法，需要向下转型(造型)
			Teacher t  = (Teacher)p;
		可以借助instanceof来判断		if(t instanceof Teacher){}

===================================================

编码题：：：：

	设计一个方法，做一个用户登录验证
		设计方法的人，用方法的人
		是否需要条件(参数)
		是否需要结果(返回值)

			静态常量	static final
			单例模式	23种

	设计一个类和类的关系，农夫养猪，屠夫杀猪
		农夫，屠夫，猪

		机房，电脑，学生
		搬家公司，卡车，家具

	设计一个类，封装ArrayBox
		LinkedBox

		变量		只能一个
		数组		好多个，长度固定		(添加不方便，删除掉)
			自己设计一个容器，存储数据，感觉上(长度可变)
			自己设计一个容器，插入删除很方便，遍历稍慢











