//llArrangement na = new NAllArrangement(5, 100);		na.tryArrangement(1);	}	public NAllArrangement(int _n, int maxNSize) {		n = _n;		a = new int[maxNSize];		d = new int[maxNSize];	}	/**	 * 处理方法	 * 	 * @param k	 */	public void tryArrangement(int k) {		for (int j = 1; j <= n; j++) { // 搜索解空间			if (d[j] == 0) {				a[k] = j;				d[j] = 1;			} else { // 表明j已用过				continue;			}			if (k < n) { // 没搜索到底				tryArrangement(k + 1);			} else {				count++;				output(); // 输出解向量			}			d[a[k]] = 0; // 回溯		}	}	/**	 * 输出解向量	 */	private void output() {		System.out.println("count = " + count);		for (int j = 1; j <= n; j++) {			System.out.print(a[j] + " ");		}		System.out.println("");	}}