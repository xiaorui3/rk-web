
	1.数组底层原理
	2.方法的设计
		看作是一件事情(内部逻辑)
		参数可以看作是，做这件事情之前需要给他提供的条件0-n
		返回值可以看作是，做完这件事情之后留下的结果0-1

权限修饰符  [特征修饰符]  返回值类型  方法名字  ([参数列表])  [抛出异常]  [{方法体}];

	权限修饰符   返回值类型  方法名字  ([参数列表])  {

	}

	权限修饰符	public   protected   默认不写   private
	方法名字		随便写(遵循规则和规约)	小驼峰

	------------------------------------------------------

	方法描述完的这段逻辑，是不能自动执行
	调用方法，让其执行

	类名字.方法名();		前提是方法得是特殊的方法(特征修饰符  static)
	对象.方法名();		普通方法(没有static)		new 对象();


	==============================================

	面向过程
		做一件事情，关注点只在事情本身的逻辑上
		做事情的步骤，第一步，第二步。。。
		public class Xxx{
			public static void main(String[] args){
				1.小数组a
				2.小数组b
				3.大数组 new int[a.length+b.length];
				4.循环将a的元素存入新数组里
				5.循环将b的元素存入新数组里(后面)
				6.增强for遍历新数组
			}
		}

		做一件事情，关注点往上提升了一点
			关注在具体的每一个步骤上
			不关注具体细节了，而是将这6个步骤，看作是一个整体
			方法名{			函数
				6步骤			所谓的包装(一堆步骤包在一起了)
			}

			对象？方法名(){
				
			}

	面向对象
		关注点在某一个具体的"对象"身上
		对象产生了之后，让这个对象去执行某个方法，方法内部有具体的逻辑
	
		----------------------------------------------

		1.先要描述一个类(抽象 笼统 概念)	人类
		2.通过抽象的概念，产生一个具体的	人
		3.让这个具体的人去做事(调用方法)

		现阶段，对类还没有太多的深入思考(只有一个)
			更多的关注点还是在方法设计上，尽量不要用静态方法了
			1.类，2.对象	3.对象调用(参数，返回值)

==================================================

	1.如何设计类
		public class XXX{
			成员---4个
			属性，方法，构造方法，代码块
		}
		类中的属性，通常是用来静态描述一些信息的，写法上(变量)，存/取值
		类中的方法，通常是用来描述一些动态的行为，写法上(方法)，执行逻辑
		构造方法，做事，做的事情有限制(只能做一件事，构建当前类的对象)
		代码块，非常特殊的方法，做事，特殊在(没名字 没参数 没返回值)

		人类----非常抽象的概念
		静态	有名字，有年龄，有性别，有身高，有体重。。。。。
		动态	能吃饭，能走路，能睡觉，能学习。。。。。。。。。

		根据你描述的类，产生对象
			
		对象。干活
	

	电脑类型
		属性--静态描述		品牌，型号，颜色。。。
		方法--做事		开机，关机，打字。。。。

	狗类型

==========================================
	上述类和对象的基础上
	1.内存空间的存储	类加载，对象开辟，属性存储
	2.属性是在对象的空间里，因为对象在堆里，属性有默认值
	3.基本类型和引用类型的区别
	4.关于方法调用，执行，传参，返回值的问题-----内存

	关注面向对象的编程思想
	1.为什么设计类，类中为什么有属性/方法这些成员
		类中可以有四个成员的，不是每一个类必须有
	2.在描述完类，通过对象去调用的时候
		不光要关注语法，更要关注底层执行的原理		

=========================================

	方法重载		overload

	方法重载指的是，在一个类中的一组方法
	拥有相同的方法名，不同的参数
	一组方法，构成了方法重载
	方法(名字 参数)
		参数的不同有三种情况	参数的类型，参数的个数，参数的顺序

	通常重载是为了给用户使用的时候提供方便的
		只需要记一个方法名

	=============================
	动态参数列表(可变参数...)
		1.数据类型...	 变量名
		2.参数的类型固定，个数可变0-n
		3.本质上就是一个数组，可以像数组一样的使用  .length  for
		4.但是他与数组类型的参数方法，不能构成重载
		5.如果参数列表中有不知一个参数，可变参数必须放在最后

=========================================

	构造方法
		1.写法	
			权限修饰符 方法名(){		要求方法名与类名相同Person

			}
		2.用法
			通过new关键字调用，返回当前类的对象
			可以接收返回值
		3.特点
			每一个类中都会含有一个默认无参数的构造方法
			如果我们在类中自己描述构造方法
			则默认无参数的那个会被覆盖
		4.构造方法也存在方法重载
		5.如果带参数的构造方法内，参数名与属性重名啦
			可以使用this来代替当前的那个对象

============================================

	代码块
		可以理解为是一个极为特殊的方法
		特殊到，没有参数，没有返回值，甚至没有名字
		代码块我们没法调用
		每一次在构建对象之前，自动调用的
		执行时间点，实在构造方法之前
		以后如果需要在构建对象之前，加载一些东西，可以使用他

===========================================

	构造方法里，被迫出现，属性和变量重名

	this关键字-----指代的是一个对象
		this可以调用一般属性，可以调用一般方法
		调用属性和调用方法，可以放在当前类成员的任何位置
			属性，方法，构造方法里，代码块里
		this能否调用构造方法呢？
			this可以调用构造方法，写法是省略类名
				this();
			调用构造方法的时候，必须放在另一个构造方法内
			并且还需要放在第一行，否则直接编译报错

	*super关键字----指代的是个对象(当前对象的父类对象)

================================================

	数据类型
	常量，变量
	数据类型之间的转化问题
	运算符号
	流程控制，分支，循环，break，continue
	数组
	如何描述类，通过类创建对象

		变量---栈，只能存一个数据
		数组---堆，能存储多个，多个长度固定的
				要求数据类型一致，通过索引号(可读性不强)
		*对象---堆，能存储多个(属性)，可以存储多个值(无限)
				对象的属性类型可以不一致，属性名可以随便起(可读性更好)


	思考数组的问题：
		数组确实可以存储一组元素
		不好的地方
			可读性不强(index索引号)
			长度是固定的，导致未来如果想要追加元素进入数组，做不到的
			数组内存地址是连续的，好处在于遍历容易，插入不方便
		我们用数组，多半都是用他好的特点
			能存一堆
			地址连续，遍历快

	能不能解决数组这个不好的问题？？？？	找寻一个新的容器，弥补数组
		我们现阶段，学习了一个类的设计
		可以利用类的设计，去描述一个新的容器-------->>>>>封装(通用的工具)

	public class ArrayBox{		新型容器(存储一组元素)
		
		添加元素

		获取元素
	}

			===========>LinkedBox

	用户(使用者)
	public static void main(String[] args){
		ArrayBox box = new ArrayBox();	int[] array = new int[3];
		box.add(10);					array[0] = 10;
		box.get();
	}
	
============================================
	会描述一个类啦
		属性，方法，构造。块

	肯定不止一个类
		关系

		继承，聚合，依赖

	类中的一些高级特性	static final abstract interface








