version: '3.8'

# 服务定义
services:
  # MySQL 数据库服务
  mysql:
    image: docker.1ms.run/mysql:8.0.43
    container_name: hd-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "20041123zZ@"  # 数据库 root 密码
      MYSQL_DATABASE: "hd"                # 自动创建目标数据库
    ports:
      - "33306:3306"  # 宿主机端口:容器端口
    volumes:
      - ./database-schema.sql:/docker-entrypoint-initdb.d/database-schema.sql  # 初始化 SQL 脚本
      - mysql-data:/var/lib/mysql  # 持久化数据库数据
    networks:
      - app-network
    healthcheck:  # 健康检查确保服务可用
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 5s
      retries: 5

  # Java 后端服务
  java-app:
    image: docker.1ms.run/openjdk:17-jdk-slim
    container_name: hd-java-app
    restart: always
    depends_on:
      mysql:
        condition: service_healthy  # 依赖 MySQL 健康状态
    ports:
      - "8080:8080"  # 后端服务端口映射
    volumes:
      - ./target/alumni-backend-1.0.0.jar:/app/app.jar  # 挂载后端应用 JAR 包
    working_dir: /app
    command: ["java", "-jar", "app.jar"]  # 启动后端应用
    networks:
      - app-network

  # Node.js 前端服务
  frontend:
    image: docker.1ms.run/node:18-alpine
    container_name: hd-frontend
    restart: unless-stopped
    depends_on:
      - java-app  # 依赖后端服务启动
    ports:
      - "5173:5173"  # 前端服务端口映射
    volumes:
      - ../hd-alumni-system/hd-alumni-system:/app  # 挂载前端源代码
      - frontend-node-modules:/app/node_modules  # 持久化 Node 依赖
    working_dir: /app
    environment:
      NODE_ENV: development  # 开发环境标识
    command: >
      sh -c "npm cache clean --force &&
             npm ci &&
             npm run build &&
             npm run dev -- --host 0.0.0.0"  # 启动命令：安装依赖→构建→启动开发服务
    networks:
      - app-network

# 网络配置
networks:
  app-network:
    driver: bridge  # 使用桥接网络实现服务互通

# 数据卷配置
volumes:
  mysql-data:  # 持久化 MySQL 数据
  frontend-node-modules:  # 持久化前端 Node 依赖